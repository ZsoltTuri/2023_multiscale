#coil_angle = as.numeric(coil_angle),
neuronal_model = as.numeric(neuronal_model))
# L23
mod0 <- glm(activated ~ 1, family = binomial, data = data %>% dplyr::filter(neuronal_model == "1"))
mod1 <- glm(activated ~ coil_angle, family = binomial,data %>% dplyr::filter(neuronal_model == "1"))
summary(mod0)
summary(mod1)
p_vals <- coef(summary(mod1))[,4]
p_vals_adj <- p.adjust(p_vals, method = "holm")
p_vals_adj < 0.05
sort(p_vals_adj)
# L5
mod0 <- glm(activated ~ 1, family = binomial, data = data %>% dplyr::filter(neuronal_model == "2"))
mod1 <- glm(activated ~ coil_angle, family = binomial,data %>% dplyr::filter(neuronal_model == "2"))
summary(mod0)
summary(mod1)
p_vals <- coef(summary(mod1))[,4]
p_vals_adj <- p.adjust(p_vals, method = "holm")
p_vals_adj < 0.05
sort(p_vals_adj)
# Activated cells: Activation threshold
ggplot(data =  mu_coil_angle %>% dplyr::filter(activation_threshold < 101), aes(x = coil_angle, y = activation_threshold, color = coil_angle)) +
facet_grid(rows = vars(neuronal_model)) +
geom_jitter(alpha = 0.25) +
stat_summary(fun.data = "mean_cl_boot", colour = "white", linewidth = 0.5, size = 0.5) +
labs(x = "", y = "Intensity (MSO%)") +
scale_color_viridis_d(option = 'G', direction = 1) +
scale_y_continuous(breaks = seq(from = 40, to = 100, by = 20)) +
coord_cartesian(ylim = c(40, 110)) +
theme_bw() +
theme(axis.text = element_text(colour = "black", size = 10),
axis.title = element_text(colour = "black", size = 12),
panel.grid.major = element_blank(), panel.grid.minor = element_blank(),
legend.position = "none")
# Activated cells: Activation threshold
ggplot(data =  mu_control_coil_angle %>% dplyr::filter(activation_threshold < 101), aes(x = coil_angle, y = activation_threshold, color = coil_angle)) +
facet_grid(rows = vars(neuronal_model)) +
geom_jitter(alpha = 0.25) +
stat_summary(fun.data = "mean_cl_boot", colour = "white", linewidth = 0.5, size = 0.5) +
labs(x = "", y = "Intensity (MSO%)") +
scale_color_viridis_d(option = 'G', direction = 1) +
scale_y_continuous(breaks = seq(from = 40, to = 100, by = 20)) +
coord_cartesian(ylim = c(40, 110)) +
theme_bw() +
theme(axis.text = element_text(colour = "black", size = 10),
axis.title = element_text(colour = "black", size = 12),
panel.grid.major = element_blank(), panel.grid.minor = element_blank(),
legend.position = "none")
# Activated cells: Activation threshold
ggplot(data =  mu_control_coil_angle %>% dplyr::filter(activation_threshold < 101), aes(x = coil_angle, y = activation_threshold, color = coil_angle)) +
facet_grid(rows = vars(neuronal_model)) +
geom_jitter(alpha = 0.25) +
stat_summary(fun.data = "mean_cl_boot", colour = "white", linewidth = 0.5, size = 0.5) +
labs(x = "", y = "Intensity (MSO%)") +
scale_fill_brewer("Blues") +
scale_y_continuous(breaks = seq(from = 40, to = 100, by = 20)) +
coord_cartesian(ylim = c(40, 110)) +
theme_bw() +
theme(axis.text = element_text(colour = "black", size = 10),
axis.title = element_text(colour = "black", size = 12),
panel.grid.major = element_blank(), panel.grid.minor = element_blank(),
legend.position = "none")
# Activated cells: Activation threshold
ggplot(data =  mu_control_coil_angle %>% dplyr::filter(activation_threshold < 101), aes(x = coil_angle, y = activation_threshold, color = coil_angle)) +
facet_grid(rows = vars(neuronal_model)) +
geom_jitter(alpha = 0.25) +
stat_summary(fun.data = "mean_cl_boot", colour = "white", linewidth = 0.5, size = 0.5) +
labs(x = "", y = "Intensity (MSO%)") +
scale_color_brewer("Blues") +
scale_y_continuous(breaks = seq(from = 40, to = 100, by = 20)) +
coord_cartesian(ylim = c(40, 110)) +
theme_bw() +
theme(axis.text = element_text(colour = "black", size = 10),
axis.title = element_text(colour = "black", size = 12),
panel.grid.major = element_blank(), panel.grid.minor = element_blank(),
legend.position = "none")
format <- "png"
ggsave(paste("graphs/supplemental_figures/S4/B.", format, sep = ""), plot = last_plot(),
width = 100, height = 85, units = "mm", dpi = 300)
# Activated cells: Activation threshold
ggplot(data =  mu_control_coil_angle %>% dplyr::filter(activation_threshold < 101), aes(x = coil_angle, y = activation_threshold, color = coil_angle)) +
facet_grid(rows = vars(neuronal_model)) +
geom_jitter() +
stat_summary(fun.data = "mean_cl_boot", colour = "white", linewidth = 0.5, size = 0.5) +
labs(x = "", y = "Intensity (MSO%)") +
scale_color_brewer("Blues") +
scale_y_continuous(breaks = seq(from = 40, to = 100, by = 20)) +
coord_cartesian(ylim = c(40, 110)) +
theme_bw() +
theme(axis.text = element_text(colour = "black", size = 10),
axis.title = element_text(colour = "black", size = 12),
panel.grid.major = element_blank(), panel.grid.minor = element_blank(),
legend.position = "none")
# Activated cells: Activation threshold
ggplot(data =  mu_control_coil_angle %>% dplyr::filter(activation_threshold < 101), aes(x = coil_angle, y = activation_threshold, color = coil_angle)) +
facet_grid(rows = vars(neuronal_model)) +
geom_jitter(shape = 21) +
stat_summary(fun.data = "mean_cl_boot", colour = "white", linewidth = 0.5, size = 0.5) +
labs(x = "", y = "Intensity (MSO%)") +
scale_color_brewer("Blues") +
scale_y_continuous(breaks = seq(from = 40, to = 100, by = 20)) +
coord_cartesian(ylim = c(40, 110)) +
theme_bw() +
theme(axis.text = element_text(colour = "black", size = 10),
axis.title = element_text(colour = "black", size = 12),
panel.grid.major = element_blank(), panel.grid.minor = element_blank(),
legend.position = "none")
# Activated cells: Activation threshold
ggplot(data =  mu_control_coil_angle %>% dplyr::filter(activation_threshold < 101), aes(x = coil_angle, y = activation_threshold, fill = coil_angle)) +
facet_grid(rows = vars(neuronal_model)) +
geom_jitter(shape = 21) +
stat_summary(fun.data = "mean_cl_boot", colour = "white", linewidth = 0.5, size = 0.5) +
labs(x = "", y = "Intensity (MSO%)") +
scale_fill_brewer("Blues") +
scale_y_continuous(breaks = seq(from = 40, to = 100, by = 20)) +
coord_cartesian(ylim = c(40, 110)) +
theme_bw() +
theme(axis.text = element_text(colour = "black", size = 10),
axis.title = element_text(colour = "black", size = 12),
panel.grid.major = element_blank(), panel.grid.minor = element_blank(),
legend.position = "none")
format <- "png"
ggsave(paste("graphs/supplemental_figures/S4/B.", format, sep = ""), plot = last_plot(),
width = 100, height = 85, units = "mm", dpi = 300)
# Activated cells: Activation threshold
ggplot(data =  mu_control_coil_angle %>% dplyr::filter(activation_threshold < 101), aes(x = coil_angle, y = activation_threshold, color = coil_angle)) +
facet_grid(rows = vars(neuronal_model)) +
geom_jitter(shape = 21) +
stat_summary(fun.data = "mean_cl_boot", colour = "white", linewidth = 0.5, size = 0.5) +
labs(x = "", y = "Intensity (MSO%)") +
scale_color_steps(n.breaks = 9, trans = 'reverse') +
scale_y_continuous(breaks = seq(from = 40, to = 100, by = 20)) +
coord_cartesian(ylim = c(40, 110)) +
theme_bw() +
theme(axis.text = element_text(colour = "black", size = 10),
axis.title = element_text(colour = "black", size = 12),
panel.grid.major = element_blank(), panel.grid.minor = element_blank(),
legend.position = "none")
# Activated cells: Activation threshold
ggplot(data =  mu_control_coil_angle %>% dplyr::filter(activation_threshold < 101), aes(x = as.numeric(coil_angle), y = activation_threshold, color = coil_angle)) +
facet_grid(rows = vars(neuronal_model)) +
geom_jitter(shape = 21) +
stat_summary(fun.data = "mean_cl_boot", colour = "white", linewidth = 0.5, size = 0.5) +
labs(x = "", y = "Intensity (MSO%)") +
scale_color_steps(n.breaks = 9, trans = 'reverse') +
scale_y_continuous(breaks = seq(from = 40, to = 100, by = 20)) +
coord_cartesian(ylim = c(40, 110)) +
theme_bw() +
theme(axis.text = element_text(colour = "black", size = 10),
axis.title = element_text(colour = "black", size = 12),
panel.grid.major = element_blank(), panel.grid.minor = element_blank(),
legend.position = "none")
# Activated cells: Activation threshold
ggplot(data =  mu_control_coil_angle %>% dplyr::filter(activation_threshold < 101), aes(x = coil_angle, y = activation_threshold, color = as.numeric(coil_angle)) +
e
)
# Activated cells: Activation threshold
ggplot(data =  mu_control_coil_angle %>% dplyr::filter(activation_threshold < 101), aes(x = coil_angle, y = activation_threshold, color = as.numeric(coil_angle))) +
facet_grid(rows = vars(neuronal_model)) +
geom_jitter(shape = 21) +
stat_summary(fun.data = "mean_cl_boot", colour = "white", linewidth = 0.5, size = 0.5) +
labs(x = "", y = "Intensity (MSO%)") +
scale_color_steps(n.breaks = 9, trans = 'reverse') +
scale_y_continuous(breaks = seq(from = 40, to = 100, by = 20)) +
coord_cartesian(ylim = c(40, 110)) +
theme_bw() +
theme(axis.text = element_text(colour = "black", size = 10),
axis.title = element_text(colour = "black", size = 12),
panel.grid.major = element_blank(), panel.grid.minor = element_blank(),
legend.position = "none")
# Activated cells: Activation threshold
ggplot(data =  mu_control_coil_angle %>% dplyr::filter(activation_threshold < 101), aes(x = coil_angle, y = activation_threshold, color = as.numeric(coil_angle))) +
facet_grid(rows = vars(neuronal_model)) +
geom_jitter(alpha = 0.25) +
stat_summary(fun.data = "mean_cl_boot", colour = "white", linewidth = 0.5, size = 0.5) +
labs(x = "", y = "Intensity (MSO%)") +
scale_color_steps(n.breaks = 9, trans = 'reverse') +
scale_y_continuous(breaks = seq(from = 40, to = 100, by = 20)) +
coord_cartesian(ylim = c(40, 110)) +
theme_bw() +
theme(axis.text = element_text(colour = "black", size = 10),
axis.title = element_text(colour = "black", size = 12),
panel.grid.major = element_blank(), panel.grid.minor = element_blank(),
legend.position = "none")
# Activated cells: Activation threshold
ggplot(data =  mu_control_coil_angle %>% dplyr::filter(activation_threshold < 101), aes(x = coil_angle, y = activation_threshold, color = as.numeric(coil_angle))) +
facet_grid(rows = vars(neuronal_model)) +
geom_jitter(alpha = 0.25) +
stat_summary(fun.data = "mean_cl_boot", colour = "white", linewidth = 0.5, size = 0.5) +
labs(x = "", y = "Intensity (MSO%)") +
scale_color_steps(n.breaks = 9, trans = 'reverse') +
scale_y_continuous(breaks = seq(from = 40, to = 100, by = 20)) +
coord_cartesian(ylim = c(40, 110)) +
theme_bw() +
theme(axis.text = element_text(colour = "black", size = 10),
axis.title = element_text(colour = "black", size = 12),
panel.grid.major = element_blank(), panel.grid.minor = element_blank(),
legend.position = "none")
format <- "svg"
ggsave(paste("graphs/supplemental_figures/S4/B.", format, sep = ""), plot = last_plot(),
width = 100, height = 85, units = "mm", dpi = 300)
mu_coil_angle %>% dplyr::filter(activation_threshold < 101) %>% dplyr::group_by(coil_angle) %>% dplyr::summarise_at(vars(activation_threshold), list(mean = mean, sd = sd)) %>% dplyr::ungroup()
mu_control_coil_angle %>% dplyr::filter(activation_threshold < 101) %>% dplyr::group_by(coil_angle) %>% dplyr::summarise_at(vars(activation_threshold), list(mean = mean, sd = sd)) %>% dplyr::ungroup()
ggsave(paste("graphs/supplemental_figures/S4/B.", format, sep = ""), plot = last_plot(),
width = 100, height = 85, units = "mm", dpi = 300)
data <- mu_control_coil_angle %>% dplyr::filter(activation_threshold < 101)
data <- within(data,
coil_angle <- relevel(syn_weight, ref = "90"))
data <- within(data,
coil_angle <- relevel(coil_angle, ref = "90"))
mod0 <- glm(activation_threshold ~ 1, family = poisson(link = "log"), data = data)
mod1 <- glm(activation_threshold ~ factor(coil_angle), family = poisson(link = "log"), data = data)
anova(mod0, mod1)
summary(mod0)
summary(mod1)
# L23
mod0 <- glm(activation_threshold ~ 1, family = poisson(link = "log"), data = data %>% dplyr::filter(neuronal_model == "1"))
View(data)
data <- mu_control_coil_angle %>% dplyr::filter(activation_threshold < 101) %>% dplyr::mutate(neuronal_model = as.numeric(neuronal_model))
data <- within(data,
coil_angle <- relevel(coil_angle, ref = "90"))
# L23
mod0 <- glm(activation_threshold ~ 1, family = poisson(link = "log"), data = data %>% dplyr::filter(neuronal_model == "1"))
mod1 <- glm(activation_threshold ~ factor(coil_angle), family = poisson(link = "log"), data = data %>% dplyr::filter(neuronal_model == "1"))
anova(mod0, mod1)
summary(mod0)
summary(mod1)
p_vals <- coef(summary(mod1))[,4]
p_vals_adj <- p.adjust(p_vals, method = "holm")
p_vals_adj < 0.05
sort(p_vals_adj)
# L5
mod0 <- glm(activation_threshold ~ 1, family = poisson(link = "log"), data = data %>% dplyr::filter(neuronal_model == "2"))
mod1 <- glm(activation_threshold ~ factor(coil_angle), family = poisson(link = "log"), data = data %>% dplyr::filter(neuronal_model == "2"))
anova(mod0, mod1)
summary(mod0)
summary(mod1)
p_vals <- coef(summary(mod1))[,4]
p_vals_adj <- p.adjust(p_vals, method = "holm")
p_vals_adj < 0.05
sort(p_vals_adj)
# GLM with binomial distribution
data <- mu_control_coil_angle %>% dplyr::mutate(activated = case_when(activation_threshold < 101 ~ 1,
activation_threshold == 101 ~ 0,
TRUE ~ NA_real_),
neuronal_model = as.numeric(neuronal_model))
# L23
mod0 <- glm(activated ~ 1, family = binomial, data = data %>% dplyr::filter(neuronal_model == "1"))
mod1 <- glm(activated ~ coil_angle, family = binomial,data %>% dplyr::filter(neuronal_model == "1"))
summary(mod0)
summary(mod1)
library(ProjectTemplate)
load.project()
max <- 1.6
min <- 1.2
# Shape
d <- ma_vol %>% dplyr::group_by(shape) %>% dplyr::summarise_at(vars(weighted_mean), list(mean = mean, sd = sd)) %>% dplyr::ungroup()
ggplot(data = d, aes(x = shape, y = mean, fill = shape)) +
geom_errorbar(aes(ymin = mean - sd, ymax = mean + sd), width = 0.2, position = position_dodge(0.9)) +
geom_point(shape = 21, size = 2, stroke = 1) +
labs(x = "Gyral shape", y = "E-field (V/m)") +
scale_y_continuous(breaks = seq(from = min, to = max, by = 0.1)) +
scale_fill_manual(values = c(c1, c2)) +
coord_cartesian(ylim = c(min, max)) +
theme_bw() +
theme(axis.text = element_text(colour = "black", size = 12),
axis.title = element_text(colour = "black", size = 12),
panel.grid.major = element_blank(), panel.grid.minor = element_blank(),
legend.position = "none")
ggplot(data = d, aes(x = shape, y = mean, fill = shape)) +
geom_errorbar(aes(ymin = mean - sd, ymax = mean + sd), width = 0.2, position = position_dodge(0.9)) +
geom_point(shape = 21, size = 2, stroke = 1) +
labs(x = "Gyral shape", y = "E-field (V/m)") +
scale_y_continuous(breaks = seq(from = min, to = max, by = 0.1)) +
scale_fill_manual(values = c(c1, c2)) +
coord_cartesian(ylim = c(min, max)) +
theme_bw() +
theme(axis.text = element_text(colour = "black", size = 12),
axis.title = element_text(colour = "black", size = 12),
panel.grid.major = element_blank(), panel.grid.minor = element_blank(),
legend.position = "none")
ggsave(paste("graphs/supplemental_figures/S5/A.", format, sep = ""), plot = last_plot(),
width = 45, height = 55, units = "mm", dpi = 300)
# Thickness
d <- ma_vol %>% dplyr::group_by(thickness) %>% dplyr::summarise_at(vars(weighted_mean), list(mean = mean, sd = sd)) %>% dplyr::ungroup()
ggplot(data = d, aes(x = thickness, y = mean, fill = thickness)) +
geom_errorbar(aes(ymin = mean - sd, ymax = mean + sd), width = 0.2, position = position_dodge(0.9)) +
geom_point(shape = 21, size = 2, stroke = 1) +
labs(x = "Cortical thickness (mm)", y = "E-field (V/m)")+
scale_x_continuous(breaks = seq(from = 1.5, to = 4.5, by = 0.5)) +
scale_y_continuous(breaks = seq(from = min, to = max, by = 0.1)) +
scale_fill_viridis_c(option = "D", direction = -1) +
coord_cartesian(ylim = c(min, max)) +
theme_bw() +
theme(axis.text = element_text(colour = "black", size = 12),
axis.title = element_text(colour = "black", size = 12),
panel.grid.major = element_blank(), panel.grid.minor = element_blank(),
legend.position = "none")
# Main simulations
main <- 15748          # neuronal model [2 neuronal models; 7874 locations]
main[2] <- 7762        # gyral shape    [7762 for the mushroom shaped gyrus]
main[3] <- 94488       # rotate cells around Y axis  [7874 locations; 12 angles]
main[4] <- 25467       # neuronal depth
main[5] <- 38843       # gyral height   [5 different heights]
# Control simulations
control <- 1000        # mesh resolution
control[2] <- 70866    # synaptic strength
control[3] <- 15748    # neuronal morphology
control[4] <- 110236   # coil angle     [7 coil angles; 2 neuronal models; 7874 locations]
# Summarize
sum(main)
sum(control)
sum(main) + sum(control)
# ROI size -------
d <- mesh_roi_size %>% dplyr::group_by(mesh) %>% dplyr::summarise_at(vars(roi_size), list(mean = mean, sd = sd)) %>% dplyr::ungroup()
range(d$mean)
max <- 50
min <- 0
ggplot(data = d, aes(x = mesh, y = mean)) +
geom_errorbar(aes(ymin = mean - sd, ymax = mean + sd), width = 0.2, position = position_dodge(0.9)) +
geom_point(shape = 21, size = 2, stroke = 1) +
labs(x = "Mesh", y = "Roi size (mm)") +
coord_cartesian(ylim = c(min, max)) +
theme_bw() +
theme(axis.text = element_text(colour = "black", size = 12),
axis.title = element_text(colour = "black", size = 12),
axis.text.x = element_text(angle = 90, hjust = 1),
panel.grid.major = element_blank(), panel.grid.minor = element_blank(),
legend.position = "none")
# Mesh properties: Tetrahedron edge length -------
range(mesh_tetrahedron$tet_edge_len)
max <- 0.9
min <- 0.75
ggplot(data = mesh_tetrahedron, aes(x = compartment, y = tet_edge_len)) +
geom_jitter(width = 0.1, size = 2) +
coord_cartesian(ylim = c(min, max)) +
labs(x = "", y = "Mean edge length (mm)") +
theme_bw() +
theme(axis.text = element_text(colour = "black", size = 14),
axis.title = element_text(colour = "black", size = 14),
panel.grid.major = element_blank(), panel.grid.minor = element_blank(),
strip.background = element_rect(fill = "white"),
legend.position = "none")
# Mesh properties: Tetrahedron volume -------
range(mesh_tetrahedron$tet_vol)
max <- 0.08
min <- 0.05
ggplot(data = mesh_tetrahedron, aes(x = compartment, y = tet_vol)) +
geom_jitter(width = 0.1, size = 2) +
coord_cartesian(ylim = c(min, max)) +
labs(x = "", y = "Mean volume (mm3)") +
theme_bw() +
theme(axis.text = element_text(colour = "black", size = 14),
axis.title = element_text(colour = "black", size = 14),
panel.grid.major = element_blank(), panel.grid.minor = element_blank(),
strip.background = element_rect(fill = "white"),
legend.position = "none")
# Mesh dimensions: mesh radius -------
aux_mesh_radius %>% dplyr::filter(compartment == 'WM')
aux_mesh_radius %>% dplyr::filter(compartment == 'GM')
# ROI size -------
d <- mesh_roi_size %>% dplyr::group_by(mesh) %>% dplyr::summarise_at(vars(roi_size), list(mean = mean, sd = sd)) %>% dplyr::ungroup()
range(d$mean)
# Mesh properties: Tetrahedron edge length -------
range(mesh_tetrahedron$tet_edge_len)
# Mesh properties: Tetrahedron volume -------
range(mesh_tetrahedron$tet_vol)
# Shape
d <- ma_vol %>% dplyr::group_by(shape) %>% dplyr::summarise_at(vars(weighted_mean), list(mean = mean, sd = sd)) %>% dplyr::ungroup()
ggplot(data = d, aes(x = shape, y = mean, fill = shape)) +
geom_errorbar(aes(ymin = mean - sd, ymax = mean + sd), width = 0.2, position = position_dodge(0.9)) +
geom_point(shape = 21, size = 2, stroke = 1) +
labs(x = "Gyral shape", y = "E-field (V/m)") +
scale_y_continuous(breaks = seq(from = min, to = max, by = 0.1)) +
scale_fill_manual(values = c(c1, c2)) +
coord_cartesian(ylim = c(min, max)) +
theme_bw() +
theme(axis.text = element_text(colour = "black", size = 12),
axis.title = element_text(colour = "black", size = 12),
panel.grid.major = element_blank(), panel.grid.minor = element_blank(),
legend.position = "none")
library(ProjectTemplate)
load.project()
library(ProjectTemplate)
load.project()
max <- 1.6
min <- 1.2
# Shape
d <- ma_vol %>% dplyr::group_by(shape) %>% dplyr::summarise_at(vars(weighted_mean), list(mean = mean, sd = sd)) %>% dplyr::ungroup()
ggplot(data = d, aes(x = shape, y = mean, fill = shape)) +
geom_errorbar(aes(ymin = mean - sd, ymax = mean + sd), width = 0.2, position = position_dodge(0.9)) +
geom_point(shape = 21, size = 2, stroke = 1) +
labs(x = "Gyral shape", y = "E-field (V/m)") +
scale_y_continuous(breaks = seq(from = min, to = max, by = 0.1)) +
scale_fill_manual(values = c(c1, c2)) +
coord_cartesian(ylim = c(min, max)) +
theme_bw() +
theme(axis.text = element_text(colour = "black", size = 12),
axis.title = element_text(colour = "black", size = 12),
panel.grid.major = element_blank(), panel.grid.minor = element_blank(),
legend.position = "none")
ggsave(paste("graphs/supplemental_figures/S5/C.", format, sep = ""), plot = last_plot(),
width = 45, height = 55, units = "mm", dpi = 300)
# Thickness
d <- ma_vol %>% dplyr::group_by(thickness) %>% dplyr::summarise_at(vars(weighted_mean), list(mean = mean, sd = sd)) %>% dplyr::ungroup()
ggplot(data = d, aes(x = thickness, y = mean, fill = thickness)) +
geom_errorbar(aes(ymin = mean - sd, ymax = mean + sd), width = 0.2, position = position_dodge(0.9)) +
geom_point(shape = 21, size = 2, stroke = 1) +
labs(x = "Cortical thickness (mm)", y = "E-field (V/m)")+
scale_x_continuous(breaks = seq(from = 1.5, to = 4.5, by = 0.5)) +
scale_y_continuous(breaks = seq(from = min, to = max, by = 0.1)) +
scale_fill_viridis_c(option = "D", direction = -1) +
coord_cartesian(ylim = c(min, max)) +
theme_bw() +
theme(axis.text = element_text(colour = "black", size = 12),
axis.title = element_text(colour = "black", size = 12),
panel.grid.major = element_blank(), panel.grid.minor = element_blank(),
legend.position = "none")
ggsave(paste("graphs/supplemental_figures/S5/D.", format, sep = ""), plot = last_plot(),
width = 85, height = 55, units = "mm", dpi = 300)
# Height
d <- ma_vol %>% dplyr::group_by(height) %>% dplyr::summarise_at(vars(weighted_mean), list(mean = mean, sd = sd)) %>% dplyr::ungroup()
ggplot(data = d, aes(x = height, y = mean, fill = height)) +
geom_errorbar(aes(ymin = mean - sd, ymax = mean + sd), width = 0.2, position = position_dodge(0.9)) +
geom_point(shape = 21, size = 2, stroke = 1) +
labs(x = "Gyral height (mm)", y = "E-field (V/m)")+
scale_y_continuous(breaks = seq(from = min, to = max, by = 0.1)) +
scale_fill_viridis_c(option = "G", direction = -1) +
coord_cartesian(ylim = c(min, max)) +
theme_bw() +
theme(axis.text = element_text(colour = "black", size = 12),
axis.title = element_text(colour = "black", size = 12),
panel.grid.major = element_blank(), panel.grid.minor = element_blank(),
legend.position = "none")
ggsave(paste("graphs/supplemental_figures/S5/E.", format, sep = ""), plot = last_plot(),
width = 65, height = 55, units = "mm", dpi = 300)
# Coil angles
d <- ma_vol %>% dplyr::group_by(coil_angle_corrected) %>% dplyr::summarise_at(vars(weighted_mean), list(mean = mean, sd = sd)) %>% dplyr::ungroup()
ggplot(data = d, aes(x = factor(coil_angle_corrected), y = mean, fill = coil_angle_corrected)) +
geom_errorbar(aes(ymin = mean - sd, ymax = mean + sd), width = 0.2, position = position_dodge(0.9)) +
geom_point(shape = 21, size = 2, stroke = 1) +
scale_fill_viridis_d(option = "C") +
labs(x = "Coil angles (degree)", y = "E-field (V/m)") +
scale_y_continuous(breaks = seq(from = min, to = max, by = 0.1)) +
coord_cartesian(ylim = c(min, max)) +
theme_bw() +
theme(axis.text = element_text(colour = "black", size = 12),
axis.title = element_text(colour = "black", size = 12),
axis.text.x = element_text(angle = 30, hjust = 1),
panel.grid.major = element_blank(), panel.grid.minor = element_blank(),
legend.position = "none")
ggsave(paste("graphs/supplemental_figures/S5/F.", format, sep = ""), plot = last_plot(),
width = 205, height = 65, units = "mm", dpi = 300)
# Statistical analysis --------------------------------------------------------------------------------------------------------------------------------------------
data <- ma_vol
data <- within(data,
coil_angle_corrected <- relevel(coil_angle_corrected, ref = "0"))
# Generalized linear model
mod0 <- lmerTest::lmer(weighted_mean ~ (1|mesh), data = data)
mod1 <- lmerTest::lmer(weighted_mean ~ (1|mesh) + thickness, data = data)
mod2 <- lmerTest::lmer(weighted_mean ~ (1|mesh) + height, data = data)
mod3 <- lmerTest::lmer(weighted_mean ~ (1|mesh) + shape, data = data)
mod4 <- lmerTest::lmer(weighted_mean ~ (1|mesh) + coil_angle_corrected, data = data)
mod5 <- lmerTest::lmer(weighted_mean ~ (1|mesh) + coil_angle_corrected + height, data = data)
mod6 <- lmerTest::lmer(weighted_mean ~ (1|mesh) + coil_angle_corrected * thickness + height, data = data)
mod7 <- lmerTest::lmer(weighted_mean ~ (1|mesh) + coil_angle_corrected * thickness + height + shape, data = data)
anova(mod0, mod1, mod2, mod3, mod4, mod5, mod6, mod7)
summary(mod7)
anova(mod7)
# Generalized linear model
mod0 <- lmerTest::lmer(weighted_mean ~ (1|mesh), data = data)
mod1 <- lmerTest::lmer(weighted_mean ~ (1|mesh) + thickness, data = data)
mod2 <- lmerTest::lmer(weighted_mean ~ (1|mesh) + height, data = data)
mod3 <- lmerTest::lmer(weighted_mean ~ (1|mesh) + shape, data = data)
mod4 <- lmerTest::lmer(weighted_mean ~ (1|mesh) + coil_angle_corrected, data = data)
anova(mod0, mod1, mod2, mod3, mod4)
summary(mod7)
summary(mod4)
anova(mod4)
anova(mod0, mod1, mod2, mod3, mod4)
# Alternative statistical analysis -------
# Linear model
mod0 <- lm(weighted_mean ~ 1, data = data)
mod1 <- lm(weighted_mean ~ thickness, data = data)
mod2 <- lm(weighted_mean ~ height, data = data)
mod3 <- lm(weighted_mean ~ shape, data = data)
mod4 <- lm(weighted_mean ~ coil_angle_corrected, data = data)
anova(mod0, mod1, mod2, mod3, mod4, mod5)
anova(mod0, mod1, mod2, mod3, mod4)
anova(mod1)
summary(mod1)
anova(mod0, mod1)
anova(mod0, mod2)
anova(mod0, mod3)
anova(mod0, mod4)
anova(mod3)
anova(mod4)
anova(mod0, mod1)
anova(mod0, mod2)
anova(mod0, mod3)
anova(mod0, mod4)
#anova(mod1) #n.s.
anova(mod2)
summary(mod2)
summary(mod3)
summary(mod4)
#anova(mod1) #n.s.
anova(mod2)
anova(mod3)
#anova(mod1) #n.s.
anova(mod1)
anova(mod4)
